name: Create and publish SEIMS Docker images

# Configures this workflow to run every time a change is pushed to the branches.
on:
  push:
    branches:
      - dev
    paths-ignore:
      - 'data'
      - 'knowledge'
  pull_request:
      branches:
        - dev
      paths-ignore:
        - 'data'
        - 'knowledge'

# Defines custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  # IMAGE_NAME: ${{ github.repository }} ==> lreis2415/seims
  IMAGE_NAME: seims
  # github container registry
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}
  # aliyun ACR
  REGION_ID_ACR: cn-hangzhou
  REGISTRY_ACR: registry.cn-hangzhou.aliyuncs.com
  NAMESPACE_ACR: onesis-geomodels
  # IMAGE_TAG: ${{ github.sha }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    # permissions: write-all
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # login alibaba Container Registry
      - name: Login to ACR
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          region-id: cn-hangzhou
          username: "${{ secrets.ACR_USERNAME }}"
          password: "${{ secrets.ACR_PASSWORD }}"

      # login ghcr.io
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_ACR }}/${{ env.NAMESPACE_ACR }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build SEIMS (including Python scripts)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.TauDEMext
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY_ACR }}/${{ env.NAMESPACE_ACR }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
